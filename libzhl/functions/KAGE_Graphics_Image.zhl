struct KAGE_Graphics_ImageBase_VertexAttributeDescriptor {
    char const* const* name : 0x0;
    uint32_t format : 0x4; // eVertexFormat
} : 0x8;

// this is actually ImagePlatformBase, this is not a problem as every image in the game is an ImagePlatformBase
struct KAGE_Graphics_ImageBase depends (SourceQuad, DestinationQuad, KColor) {
    __vtable {
		skip; // IsLoaded
		skip; // IsProcedural

		// Returns the (batched) vertex buffer for this specific render, so that shader specific attributes may be submitted.
		// Position, Color and Texture Coordinates are already submitted by the function, if they are defined as such in the VertexAttributeDescriptor
        "558bec83ec248b4508568bf10f1000":
        float* Render(const SourceQuad& source, const DestinationQuad& dest, const KColor& colTopLeft, const KColor& colTopRight, const KColor& colBottomLeft, const KColor& colBottomRight);
		
		// Returns the (batched) vertex buffer for this specific render, so that shader specific attributes may be submitted.
		// Position, Color and Texture Coordinates are already submitted by the function, if they are defined as such in the VertexAttributeDescriptor
        "558bec8b45108b1150505050ff750cff7508ff5208":
        float* Render(const SourceQuad& source, const DestinationQuad& dest, const KColor& color);
		
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render

		pure int GetWidth();
		pure int GetHeight();
		pure int GetPaddedWidth();
		pure int GetPaddedHeight();

		skip; // GetBytesPerPixel
	
		"558bec83e4f883ec1c8b55":
		void SetVertexFormat(const KAGE_Graphics_ImageBase_VertexAttributeDescriptor& vertexFormat);

		skip; // SetFilterMode
		skip; // SetWrapMode
		skip; // IsPalleted
		skip; // SetPalette
		skip; // SetTexel
		skip; // GetTexel

		"558bec51a0":
		void GetTexelRegion(int x, int y, uint32_t width, uint32_t height, void* buffer);

		skip; // RenderTexturedTriangle
		skip; // Free?
		skip; // Load
		skip; // Load
		skip; // Load
		skip; // SwapBatches
		skip; // FreeBatches
		skip; // Unload
		skip; // Reload
		skip; // UnloadImageData
		skip; // Bind
		skip; // ApplyPallete

		"558bec83ec2c57":
		void apply_image();

		skip; // SetTexelData (exclusive to ImagePlatformBase)
    };

	uint32_t _predefinedShader: 0x20;
	uint8_t* _vertexFormat : 0x34;
	uint8_t _numVertexAttributes : 0x38;
	uint16_t _vertexFormatStride : 0x3a;
	char* _name : 0x3c;
	vector_RenderBatchPtr _renderBatches : 0x40;
	KAGE_Graphics_RenderBatch* _lastRenderBatch : 0x4c;
	vector_RenderBatchPtr _reusableTransparentRenderBatches : 0x50;
	KAGE_Graphics_RenderBatch* _lastTransparentRenderBatch : 0x5c;
} : 0x80;

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505383ec385657a1????????33c5508d45??64a3????????8bf18975":
__thiscall KAGE_Graphics_RenderBatch* KAGE_Graphics_ImageBase::get_batch(bool isTransparent);

struct KAGE_Graphics_ImagePNG : public KAGE_Graphics_ImageBase {

};

struct KAGE_Graphics_ImagePIC : public KAGE_Graphics_ImageBase {

};

struct KAGE_Graphics_ImagePCX : public KAGE_Graphics_ImageBase {

};

"8b098b8710010000c1e80924010fb6c05068(????????)518d45d850":
reference KAGE_Graphics_ImageBase_VertexAttributeDescriptor g_VertexAttributeDescriptor_Position;

/* For convenience's sake:
		skip; // IsLoaded
		skip; // IsProcedural
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // Render
		skip; // GetWidth
		skip; // GetHeight
		skip; // GetPaddedWidth
		skip; // GetPaddedHeight
		skip; // GetBytesPerPixel
		skip; // SetVertexFormat
		skip; // SetFilterMode
		skip; // SetWrapMode
		skip; // IsPalleted
		skip; // SetPalette
		skip; // SetTexel
		skip; // GetTexel
		skip; // GetTexelRegion
		skip; // RenderTexturedTriangle
		skip; // Free?
		skip; // Load
		skip; // Load
		skip; // Load
		skip; // SwapBatches
		skip; // FreeBatches
		skip; // Unload
		skip; // Reload
		skip; // UnloadImageData
		skip; // Bind
		skip; // ApplyPallete
		skip; // apply_image
		skip; // SetTexelData
*/