struct AnimationLayer depends (AnimationFrame) { {{
	inline int GetLayerID() { return this->_layerID; }
	// Number of unique frames. Not the total length of the animation.
	// Note that interpolated frames have been split into multiple frames.
	// Should only be used internally, for accessing the array of AnimationFrames.
	inline int GetFrameCount() { return this->_numFrames; }
	inline AnimationFrame* GetFrame(const int frame) {
		if (this->_animFrames != nullptr && frame >= 0 && frame < this->GetFrameCount()) {
			return &this->_animFrames[frame];
		}
		return nullptr;
	}
	inline bool IsVisible() { return this->_visible; }
}}


    int _layerID : 0x0;
    AnimationFrame* _animFrames : 0x4;
    int _numFrames : 0x8;
    bool _visible : 0xC;
} : 0x10;

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ec98010000a1????????33c58945??5657508d45??64a3????????8079??00":
__thiscall void AnimationLayer::RenderFrame(const Vector& position, int frameIndex, const Vector& topLeftClamp, const Vector& BottomRightClamp, ANM2* animation);

"558bec83e4f883ec10803d????????00":
static __stdcall SourceQuad* AnimationLayer::GetSourceQuad(SourceQuad* ret, void* unused, const AnimationFrame& frame, const LayerState& layer, const Vector& topLeftClamp, const Vector& BottomRightClamp, const ANM2& animation);

"558bec83e4f883ec448b45??8b55":
static __stdcall DestinationQuad* AnimationLayer::GetDestQuad(DestinationQuad* ret, const Vector& position, const AnimationFrame& frame, const LayerState& layer, const Vector& topLeftClamp, const Vector& BottomRightClamp, const ANM2& animation);